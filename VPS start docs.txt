Telegram Scheduler - Docker VPS Deployment Guide
Complete Docker setup for deploying Telegram Scheduler on a VPS with Redis, MongoDB, and full production configuration.
📋 Prerequisites
VPS Requirements

RAM: Minimum 2GB (4GB recommended)
Storage: Minimum 10GB free space
OS: Ubuntu 20.04+ or similar Linux distribution
Network: Public IP address with ports 80, 443 accessible

Domain & SSL

Domain name pointing to your VPS IP
Email address for SSL certificate

Telegram Bot

Telegram bot token from @BotFather
Bot username
Your Telegram user ID (admin access)

🚀 Quick Start
1. Set Environment Variables
bash# Required configuration
export VPS_HOST="your.vps.ip.address"
export DOMAIN="scheduler.yourdomain.com"
export EMAIL="admin@yourdomain.com"
export TELEGRAM_BOT_TOKEN="1234567890:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
export TELEGRAM_BOT_USERNAME="your_bot_username"
export ADMIN_TELEGRAM_IDS="123456789,987654321"

# Optional configuration
export VPS_USER="root"  # Default: root
export APP_DIR="/opt/telegram-scheduler"  # Default path
2. Deploy to VPS
bash# Make deployment script executable
chmod +x deploy-to-vps.sh

# Run full deployment
./deploy-to-vps.sh deploy
3. Access Your Application

Web Interface: https://scheduler.yourdomain.com
API Health: https://scheduler.yourdomain.com/api/health
Redis Admin: https://scheduler.yourdomain.com/admin/redis

🛠️ Manual Setup (Alternative)
If you prefer manual setup or need to customize the deployment:
1. Prepare Your VPS
bash# Update system
apt update && apt upgrade -y

# Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh

# Install Docker Compose
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# Create application directory
mkdir -p /opt/telegram-scheduler
cd /opt/telegram-scheduler
2. Clone and Setup
bash# Upload your code to VPS
git clone <your-repository> .

# Or upload manually
scp -r . root@your-vps:/opt/telegram-scheduler/
3. Configure Environment
bash# Create environment file
cp .env.example .env

# Edit configuration
nano .env
4. Start Services
bash# Build and start all services
docker-compose up -d --build

# Check status
docker-compose ps

# View logs
docker-compose logs -f
📁 Project Structure
telegram-scheduler/
├── backend/                 # Laravel API
│   ├── Dockerfile
│   ├── app/
│   ├── config/
│   └── ...
├── frontend/               # React App
│   ├── Dockerfile
│   ├── src/
│   ├── public/
│   └── ...
├── docker/                # Docker configurations
│   ├── nginx/
│   ├── redis/
│   ├── mongodb/
│   └── php/
├── scripts/               # Management scripts
├── docker-compose.yml    # Main compose file
├── .env.example          # Environment template
└── deploy-to-vps.sh     # Deployment script
🐳 Docker Services
ServiceDescriptionPortRolefrontendReact application3000Web interfacebackendLaravel API8000API serverqueue-workerQueue processing-Message processingschedulerCron jobs-Task schedulingmongodbDatabase27017Data storageredisCache & Queues6379PerformancenginxReverse proxy80, 443Load balancing
⚙️ Configuration
Environment Variables (.env)
bash# Application
APP_NAME="Telegram Scheduler"
APP_ENV=production
APP_KEY=base64:your-generated-key
APP_URL=https://scheduler.yourdomain.com

# Database
DB_DATABASE=telegram_scheduler
MONGO_ROOT_USERNAME=admin
MONGO_ROOT_PASSWORD=secure-password

# Redis
REDIS_PASSWORD=secure-redis-password

# Telegram
TELEGRAM_BOT_TOKEN=your-bot-token
TELEGRAM_BOT_USERNAME=your_bot_username

# Admin
ADMIN_TELEGRAM_IDS=123456789,987654321
ADMIN_EMAIL=admin@yourdomain.com
Telegram Bot Setup

Create Bot: Message @BotFather on Telegram
Get Token: Use /newbot command
Set Webhook:
bashcurl -X POST "https://api.telegram.org/bot<YOUR_BOT_TOKEN>/setWebhook" \
     -H "Content-Type: application/json" \
     -d '{"url":"https://scheduler.yourdomain.com/api/telegram/webhook"}'


📊 Management Commands
Once deployed, use these commands on your VPS:
bash# Application management
telegram-scheduler start      # Start all services
telegram-scheduler stop       # Stop all services
telegram-scheduler restart    # Restart all services
telegram-scheduler status     # Show status
telegram-scheduler logs       # Show logs
telegram-scheduler update     # Update application

# Maintenance
telegram-scheduler backup     # Create backup
telegram-scheduler restore    # Restore from backup
telegram-scheduler shell      # Open container shell
🔒 Security Features
SSL Certificate

Automatic SSL setup with Let's Encrypt
Auto-renewal configured
HTTP to HTTPS redirect

Rate Limiting

API rate limiting (60 requests/minute)
Webhook rate limiting (10 requests/second)
Telegram API rate limiting

Firewall

UFW firewall configuration
Only necessary ports open
SSH access protection

📈 Monitoring & Logging
Health Checks

Application health endpoint: /health
Automatic container restart
Service monitoring every 5 minutes

Logs

Application logs: docker-compose logs
Nginx logs: /var/log/nginx/
System logs: /var/log/telegram-scheduler-monitor.log

Monitoring Dashboard
bash# View live status
telegram-scheduler status

# Monitor logs in real-time
telegram-scheduler logs backend
telegram-scheduler logs queue-worker
💾 Backup & Restore
Automatic Backups

MongoDB backup: Daily at 2 AM
Application files backup
7-day retention policy

Manual Backup
bash# Create backup
telegram-scheduler backup

# List available backups
ls -la /opt/backups/telegram-scheduler/

# Restore from backup
telegram-scheduler restore 20240119_140530
🚨 Troubleshooting
Common Issues
Services Won't Start
bash# Check logs
docker-compose logs

# Check disk space
df -h

# Restart services
docker-compose down && docker-compose up -d
High Memory Usage
bash# Check container resources
docker stats

# Restart queue workers
docker-compose restart queue-worker
SSL Certificate Issues
bash# Renew certificate manually
certbot renew

# Copy new certificates
cp /etc/letsencrypt/live/yourdomain.com/*.pem /opt/telegram-scheduler/ssl/
systemctl reload nginx
Database Connection Issues
bash# Check MongoDB logs
docker-compose logs mongodb

# Restart MongoDB
docker-compose restart mongodb
Performance Optimization
For High Volume (1000+ messages/day)
bash# Increase queue workers
docker-compose up -d --scale queue-worker=5

# Monitor Redis memory
docker-compose exec redis redis-cli info memory
Database Optimization
bash# Create indexes
docker-compose exec backend php artisan db:setup-indexes

# Optimize MongoDB
docker-compose exec mongodb mongo --eval "db.runCommand('compact')"
📱 Mobile Access
The application is mobile-responsive and works on:

iOS Safari
Android Chrome
Mobile browsers

🔄 Updates
Quick Update
bash# Pull latest changes
git pull

# Quick update deployment
./deploy-to-vps.sh update
Full Update
bash# Full redeployment
./deploy-to-vps.sh deploy
📞 Support
Getting Help

Check logs: telegram-scheduler logs
Verify configuration: telegram-scheduler status
Review health checks: curl https://yourdomain.com/health

Performance Metrics

Target: 1000-10000 messages/day
Response Time: < 200ms API responses
Uptime: 99.9% availability
Storage: Automatic cleanup and optimization

🎯 Next Steps
After successful deployment:

Test the Application

Log in with your Telegram account
Add your groups
Schedule a test message


Configure Monitoring

Set up email alerts
Configure Slack notifications
Monitor queue performance


Optimize for Scale

Increase queue workers if needed
Monitor resource usage
Set up database backups


Security Hardening

Change default passwords
Enable 2FA for VPS access
Regular security updates



🔗 Useful Links

Docker Documentation
Laravel Documentation
React Documentation
Telegram Bot API
MongoDB Documentation
Redis Documentation