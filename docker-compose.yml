# docker-compose.yml - Complete Production Setup
version: "3.8"

services:
  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: telegram-scheduler-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_TELEGRAM_BOT_USERNAME=tgappy_bot
    networks:
      - telegram-scheduler
    depends_on:
      - backend
    volumes:
      - frontend_build:/app/build

  # Backend (Laravel)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: telegram-scheduler-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=base64:wtqQ/6f+i9YERhRjXUttSgRw4VCEtn+zSsCyZioemZs=
      - APP_URL=https://68c6605bb77f.ngrok-free.app
      - DB_CONNECTION=mongodb
      - MONGO_DB_CONNECTION=mongodb://mongodb:27017
      - DB_DATABASE=telegram_scheduler
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis-primary
      - CACHE_STORE=redis
      - SESSION_DRIVER=redis
      - TELEGRAM_BOT_TOKEN=7779533338:AAH-B1-r4GQzJStkyC7Ecziip7ccgso5AOs
      - TELEGRAM_BOT_USERNAME=tgappy_bot
      - ADMIN_TELEGRAM_IDS=6941596189
      - CONTAINER_ROLE=app
    volumes:
      - ./backend:/var/www/html
      - backend_storage:/var/www/html/storage
      - backend_uploads:/var/www/html/storage/app/public
    networks:
      - telegram-scheduler
    depends_on:
      - mongodb
      - redis
    command: php artisan serve --host=0.0.0.0 --port=8000

  # Queue Workers
  queue-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=base64:wtqQ/6f+i9YERhRjXUttSgRw4VCEtn+zSsCyZioemZs=
      - DB_CONNECTION=mongodb
      - MONGO_DB_CONNECTION=mongodb://mongodb:27017
      - DB_DATABASE=telegram_scheduler
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis-primary
      - CACHE_STORE=redis
      - TELEGRAM_BOT_TOKEN=7779533338:AAH-B1-r4GQzJStkyC7Ecziip7ccgso5AOs
      - CONTAINER_ROLE=queue
    volumes:
      - ./backend:/var/www/html
      - backend_storage:/var/www/html/storage
      - backend_uploads:/var/www/html/storage/app/public
    networks:
      - telegram-scheduler
    depends_on:
      - mongodb
      - redis
      - backend
    deploy:
      replicas: 3
    command: php artisan queue:work redis-primary --sleep=1 --tries=3 --max-time=3600 --memory=512

  # Scheduler (Cron Jobs)
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=base64:wtqQ/6f+i9YERhRjXUttSgRw4VCEtn+zSsCyZioemZs=
      - DB_CONNECTION=mongodb
      - MONGO_DB_CONNECTION=mongodb://mongodb:27017
      - DB_DATABASE=telegram_scheduler
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis-primary
      - CACHE_STORE=redis
      - TELEGRAM_BOT_TOKEN=7779533338:AAH-B1-r4GQzJStkyC7Ecziip7ccgso5AOs
      - CONTAINER_ROLE=scheduler
    volumes:
      - ./backend:/var/www/html
      - backend_storage:/var/www/html/storage
    networks:
      - telegram-scheduler
    depends_on:
      - mongodb
      - redis
      - backend
    command: >
      sh -c "
        while true; do
          php artisan schedule:run --verbose --no-interaction
          sleep 60
        done
      "

  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: telegram-scheduler-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=${DB_DATABASE:-telegram_scheduler}
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/mongod.conf:/etc/mongod.conf
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - telegram-scheduler
    command: mongod --config /etc/mongod.conf

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: telegram-scheduler-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    networks:
      - telegram-scheduler
    command: redis-server /etc/redis/redis.conf
    sysctls:
      - net.core.somaxconn=1024

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: telegram-scheduler-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/certs
      - frontend_build:/var/www/frontend
      - backend_uploads:/var/www/backend/storage
    networks:
      - telegram-scheduler
    depends_on:
      - frontend
      - backend

  # Monitoring (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: telegram-scheduler-redis-ui
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - telegram-scheduler
    depends_on:
      - redis
    profiles:
      - monitoring

networks:
  telegram-scheduler:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_storage:
    driver: local
  backend_uploads:
    driver: local
  frontend_build:
    driver: local
